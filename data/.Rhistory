text = element_text(family = "Yantramanav"),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, size = 14, color = "black"),
plot.subtitle = element_text(hjust = 0.5, size = 13, color = "#5c5c5c")) +
coord_flip()
p
ggsave("~/Desktop/img3.tiff", plot = p, device = "tiff", dpi = 300)
p <- ggplot(dt[year == 2018], aes(x = year, y = metacritic_score,
fill = type, alpha = type, size = type)) +
geom_beeswarm(priority = "density", color = "#515151", pch = 21, cex = 1.4) +
scale_x_reverse(name = NULL, breaks = 2000:2019) +
scale_y_continuous(name = "Metacritic Score", limits = c(40, 100)) +
scale_size_manual(name = NULL, values = c(4, 4, 3)) +
scale_alpha_manual(name = NULL, values = c(1, 1, 1)) +
scale_fill_manual(name = NULL, values = c("#FFE100", "#E35DEF", "#D4D4D4")) +
labs(title = "The Academy frequenty ignores some of the best films in the Best Picture category",
subtitle = "2018 Best Picture nominees vs. other comparable non-nominated films") +
theme_minimal() +
theme(legend.position = "top",
text = element_text(family = "Yantramanav"),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, size = 14, color = "black"),
plot.subtitle = element_text(hjust = 0.5, size = 12, color = "#5c5c5c")) +
coord_flip()
p
ggsave("~/Desktop/img3.tiff", plot = p, device = "tiff", dpi = 300)
p <- ggplot(dt[year == 2018], aes(x = year, y = metacritic_score,
fill = type, alpha = type, size = type)) +
geom_beeswarm(priority = "density", color = "#515151", pch = 21, cex = 1.4) +
scale_x_reverse(name = NULL, breaks = 2000:2019) +
scale_y_continuous(name = "Metacritic Score", limits = c(40, 100)) +
scale_size_manual(name = NULL, values = c(4, 4, 3)) +
scale_alpha_manual(name = NULL, values = c(1, 1, 1)) +
scale_fill_manual(name = NULL, values = c("#FFE100", "#E35DEF", "#D4D4D4")) +
labs(title = "The Academy frequenty ignores some of the best films in the Best Picture category",
subtitle = "2018 Best Picture nominees vs. other comparable non-nominated films") +
theme_minimal() +
theme(legend.position = "top",
text = element_text(family = "Yantramanav"),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14, color = "black"),
plot.subtitle = element_text(hjust = 0.5, size = 12, color = "#5c5c5c")) +
coord_flip()
p
ggsave("~/Desktop/img3.tiff", plot = p, device = "tiff", dpi = 300)
p <- ggplot(dt[year == 2017], aes(x = year, y = metacritic_score,
fill = type, alpha = type, size = type)) +
geom_beeswarm(priority = "density", color = "#515151", pch = 21, cex = 1.4) +
scale_x_reverse(name = NULL, breaks = 2000:2019) +
scale_y_continuous(name = "Metacritic Score", limits = c(40, 100)) +
scale_size_manual(name = NULL, values = c(4, 4, 3)) +
scale_alpha_manual(name = NULL, values = c(1, 1, 1)) +
scale_fill_manual(name = NULL, values = c("#FFE100", "#E35DEF", "#D4D4D4")) +
labs(title = "The Academy frequenty ignores some of the best films in the Best Picture category",
subtitle = "2017 Best Picture nominees vs. other comparable non-nominated films") +
theme_minimal() +
theme(legend.position = "top",
text = element_text(family = "Yantramanav"),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14, color = "black"),
plot.subtitle = element_text(hjust = 0.5, size = 12, color = "#5c5c5c")) +
coord_flip()
p
ggsave("~/Desktop/img2.tiff", plot = p, device = "tiff", dpi = 300)
p <- ggplot(dt[year == 2016], aes(x = year, y = metacritic_score,
fill = type, alpha = type, size = type)) +
geom_beeswarm(priority = "density", color = "#515151", pch = 21, cex = 1.4) +
scale_x_reverse(name = NULL, breaks = 2000:2019) +
scale_y_continuous(name = "Metacritic Score", limits = c(40, 100)) +
scale_size_manual(name = NULL, values = c(4, 4, 3)) +
scale_alpha_manual(name = NULL, values = c(1, 1, 1)) +
scale_fill_manual(name = NULL, values = c("#FFE100", "#E35DEF", "#D4D4D4")) +
labs(title = "The Academy frequenty ignores some of the best films in the Best Picture category",
subtitle = "2016 Best Picture nominees vs. other comparable non-nominated films") +
theme_minimal() +
theme(legend.position = "top",
text = element_text(family = "Yantramanav"),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14, color = "black"),
plot.subtitle = element_text(hjust = 0.5, size = 12, color = "#5c5c5c")) +
coord_flip()
p
ggsave("~/Desktop/img1.tiff", plot = p, device = "tiff", dpi = 300)
ggsave("~/Desktop/img4.tiff", plot = p, device = "tiff", dpi = 300)
p <- ggplot(dt[year == 2019], aes(x = year, y = metacritic_score,
fill = type, alpha = type, size = type)) +
geom_beeswarm(priority = "density", color = "#515151", pch = 21, cex = 1.4) +
scale_x_reverse(name = NULL, breaks = 2000:2019) +
scale_y_continuous(name = "Metacritic Score", limits = c(40, 100)) +
scale_size_manual(name = NULL, values = c(4, 3)) +
scale_alpha_manual(name = NULL, values = c(1, 1, 1)) +
scale_fill_manual(name = NULL, values = c("#E35DEF", "#D4D4D4")) +
labs(title = "The Academy frequenty ignores some of the best films in the Best Picture category",
subtitle = "2019 Best Picture nominees vs. other comparable non-nominated films") +
theme_minimal() +
theme(legend.position = "top",
text = element_text(family = "Yantramanav"),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14, color = "black"),
plot.subtitle = element_text(hjust = 0.5, size = 12, color = "#5c5c5c")) +
coord_flip()
p
ggsave("~/Desktop/img4.tiff", plot = p, device = "tiff", dpi = 300)
dt[year == 2017 & oscars_nom == 1]
dt[year == 2017 & oscars_nom == 1]
dt[year == 2016 & oscars_nom == 1]
dt[year == 2018 & oscars_nom == 1]
dt[year == 2019 & oscars_nom == 1]
install.packages("patchwork")
library(ggplot2)
library(patchwork)
p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp))
p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))
p1 + p2
p1 | p2
p1 / p2
remotes::install_github("mattcowgill/ggannotate")
library(ggplot2)
library(patchwork)
p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))
p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp))
p1 | p2
ggannotate::ggannotate()
ggannotate::ggannotate(p1)
library(xlsx)
install.packages("xlsx")
library(xlsx)
dat_wide <- tibble(
x = 1:3,
top = c(4.5, 4, 5.5),
middle = c(4, 4.75, 5),
bottom = c(3.5, 3.75, 4.5)
)
dat <- dat_wide %>%
pivot_longer(
cols = c(top, middle, bottom),
names_to = "region",
values_to = "awfulness") %>%
mutate(
region_ABCD = factor(region),
region_sane = fct_reorder2(region, x, awfulness)
)
library(tidyverse)
library(patchwork)
dat_wide <- tibble(
x = 1:3,
top = c(4.5, 4, 5.5),
middle = c(4, 4.75, 5),
bottom = c(3.5, 3.75, 4.5)
)
dat <- dat_wide %>%
pivot_longer(
cols = c(top, middle, bottom),
names_to = "region",
values_to = "awfulness") %>%
mutate(
region_ABCD = factor(region),
region_sane = fct_reorder2(region, x, awfulness)
)
dat
dat <- dat_wide %>%
pivot_longer(
cols = c(top, middle, bottom),
names_to = "region",
values_to = "awfulness") %>%
mutate(
region_ABCD = factor(region),
region_sane = fct_reorder2(region, x, awfulness)
)
p_ABCD <- ggplot(dat, aes(x, awfulness, colour = region_ABCD)) +
geom_line() + theme(legend.justification = c(1, 0.85))
p_sane <- ggplot(dat, aes(x, awfulness, colour = region_sane)) +
geom_line() + theme(legend.justification = c(1, 0.85))
p_sane2 <- ggplot(dat, aes(x, awfulness, colour = awfulness)) +
geom_line() + theme(legend.justification = c(1, 0.85))
View(p_sane2)
p_sane2
p_sane2 <- ggplot(dat, aes(x, awfulness, colour = factor(awfulness))) +
geom_line() + theme(legend.justification = c(1, 0.85))
p_sane2
p_sane
p_sane2 <- ggplot(dat, aes(x, awfulness, colour = factor(region))) +
geom_line() + theme(legend.justification = c(1, 0.85))
p_sane2
library(tidyr)
install.package("beepr")
install.packages("beepr")
beepr::beep()
beepr::beep()
beepr::beep()
beepr::beep()
beepr::beep()
beepr::beep()
beepr::beep()
beepr::beep()
beepr::beep()
beepr::beep()
beepr::beep()
library(dplyr)
dplyr::relocate()
library(data.table)
dt <- data.table(mtcars)
dt
mtcars
mtcars
setcolorder(dt, c("cyl", "disp"))
dt
library(dplyr)
library(data.table)
mtcars
mtcars[, rank := frank(disp, hp, drat, wt), by = cyl]
dt <- data.table(mtcars)
dt[, rank := frank(disp, hp, drat, wt), by = cyl]
dt <- data.table(mtcars)
dt[, rank := frank(c("disp", "hp"), by = cyl]
dt[, rank := frank(c("disp", "hp")), by = cyl]
?frank
dt[, rank := frank(.SD, c("disp", "hp")), by = cyl]
dt[, rank := frankv(.SD, c("disp", "hp")), by = cyl]
dt <- data.table(mtcars)
dt[, rank := frankv(.SD, c("disp", "hp")), by = cyl]
dt
dt <- data.table(mtcars)
dt[, rank := frankv(.SD, c("disp", "hp"), ties.method = "random"), by = cyl]
dt <- data.table(mtcars)
dt[, rank := frankv(c("disp", "hp"), ties.method = "random"), by = cyl]
dt <- data.table(mtcars)
dt[, rank := frankv(.SD, c("disp", "hp"), ties.method = "random"), by = cyl]
dt <- data.table(mtcars)
dt[, rank := frankv(.SD$disp, ties.method = "random"), by = cyl]
dt
dt <- data.table(mtcars)
dt[, x0_pos := as.numeric(as.factor(cyl))]
dt %>% head()
5 %% 2
dt[, rank := frankv(.SD$disp, ties.method = "random"), by = cyl]
dt[, x1_pos := rank %% 3]
dt %>% head()
floor(3.2)
dt[, y_pos := floor(rank / 3)]
dt %>% head()
dt[order(x0_pos, rank)]
dt[, rank := frankv(.SD$disp, ties.method = "random"), by = cyl]
dt[, x1_pos := (rank - 1) %% 3]
dt[, y_pos := floor(rank / 3)]
dt[order(x0_pos, rank)]
bar_width <- 3
dt[, x1_pos := ((rank - 1) %% bar_width) / bar_width]
dt[, y_pos := floor(rank / bar_width)]
dt[order(x0_pos, rank)]
bar_width <- 3
dt[, x1_pos := ((rank - 1) %% bar_width) / bar_width]
dt[, y_pos := floor((rank - 1) / bar_width)]
dt[order(x0_pos, rank)]
library(ggplot2)
ggplot(dt, aes(x = x0_pos + x1_pos, y = y_pos, alpha = rank)) +
geom_point(color = "red")
dt <- data.table(group = sample(LETTERS[1:10], n_obs, replace = T),
value = runif(n_obs))
dt[, x0_pos := as.numeric(as.factor(group))]
dt[, rank := frankv(.SD$value, ties.method = "random"), by = group]
n_obs <- 100
dt <- data.table(group = sample(LETTERS[1:10], n_obs, replace = T),
value = runif(n_obs))
dt[, x0_pos := as.numeric(as.factor(group))]
dt[, rank := frankv(.SD$value, ties.method = "random"), by = group]
bar_width <- 3
dt[, x1_pos := ((rank - 1) %% bar_width) / bar_width]
dt[, y_pos := floor((rank - 1) / bar_width)]
ggplot(dt, aes(x = x0_pos + x1_pos, y = y_pos, alpha = rank)) +
geom_point(color = "red")
n_obs <- 100
dt <- data.table(group = sample(LETTERS[1:10], n_obs, replace = T),
value = runif(n_obs))
dt[, x0_pos := as.numeric(as.factor(group))]
dt[, rank := frankv(.SD$value, ties.method = "random"), by = group]
bar_width <- 3
dt[, x1_pos := ((rank - 1) %% bar_width) / (bar_width + 1)]
dt[, y_pos := floor((rank - 1) / bar_width)]
ggplot(dt, aes(x = x0_pos + x1_pos, y = y_pos, alpha = rank)) +
geom_point(color = "red")
n_obs <- 1000
dt <- data.table(group = sample(LETTERS[1:20], n_obs, replace = T),
value = runif(n_obs))
dt[, x0_pos := as.numeric(as.factor(group))]
dt[, rank := frankv(.SD$value, ties.method = "random"), by = group]
bar_width <- 3
dt[, x1_pos := ((rank - 1) %% bar_width) / (bar_width + 1)]
dt[, y_pos := floor((rank - 1) / bar_width)]
ggplot(dt, aes(x = x0_pos + x1_pos, y = y_pos, alpha = rank)) +
geom_point(color = "red")
bar_width <- 5
dt[, x1_pos := ((rank - 1) %% bar_width) / (bar_width + 1)]
dt[, y_pos := floor((rank - 1) / bar_width)]
ggplot(dt, aes(x = x0_pos + x1_pos, y = y_pos, alpha = rank)) +
geom_point(color = "red")
bar_width <- 5
dt[, x1_pos := ((rank - 1) %% bar_width) / (bar_width + 2)]
dt[, y_pos := floor((rank - 1) / bar_width)]
ggplot(dt, aes(x = x0_pos + x1_pos, y = y_pos, alpha = rank)) +
geom_point(color = "red")
ggplot(dt, aes(x = x0_pos + x1_pos, y = y_pos, alpha = rank)) +
geom_point(color = "red") +
theme_minimal()
ggplot(dt, aes(x = x0_pos + x1_pos, y = y_pos, alpha = rank)) +
geom_point(color = "red") +
theme_bw()
ggplot(dt, aes(x = x0_pos + x1_pos, y = y_pos, alpha = rank)) +
geom_point(color = "red") +
theme_classic()
dt[, x1_pos := ((rank - 1) %% bar_width) / (bar_width + 3)]
dt[, y_pos := floor((rank - 1) / bar_width)]
ggplot(dt, aes(x = x0_pos + x1_pos, y = y_pos, alpha = rank)) +
geom_point(color = "red") +
theme_classic()
ggplot(dt, aes(x = x0_pos + x1_pos, y = y_pos, alpha = rank)) +
geom_point(color = "red") +
scale_x_discrete(labels = group) +
theme_classic()
ggplot(dt, aes(x = x0_pos + x1_pos, y = y_pos, alpha = rank)) +
geom_point(color = "red") +
scale_x_continuous(labels = group) +
theme_classic()
ggplot(dt, aes(x = x0_pos + x1_pos, y = y_pos, alpha = rank)) +
geom_point(color = "red") +
scale_x_continuous(breaks = LETTERS[1:20]) +
theme_classic()
n_obs <- 1000
dt <- data.table(group = sample(LETTERS[1:20], n_obs, replace = T),
value = runif(n_obs))
dt[, x0_pos := as.factor(group)]
dt[, rank := frankv(.SD$value, ties.method = "random"), by = group]
bar_width <- 5
dt[, x1_pos := ((rank - 1) %% bar_width) / (bar_width + 3)]
dt[, y_pos := floor((rank - 1) / bar_width)]
ggplot(dt, aes(x = x0_pos + x1_pos, y = y_pos, alpha = rank)) +
geom_point(color = "red") +
scale_x_continuous(breaks = LETTERS[1:20]) +
theme_classic()
ggplot(dt, aes(x = as.numeric(x0_pos) + x1_pos, y = y_pos, alpha = rank)) +
geom_point(color = "red") +
scale_x_continuous(breaks = LETTERS[1:20]) +
theme_classic()
ggplot(dt, aes(x = as.numeric(x0_pos) + x1_pos, y = y_pos, alpha = rank)) +
geom_point(color = "red") +
# scale_x_continuous(breaks = LETTERS[1:20]) +
theme_classic()
n_obs <- 1000
dt <- data.table(group = sample(LETTERS[1:20], n_obs, replace = T),
value = runif(n_obs))
dt[, x0_pos := as.numeric(as.factor(group))]
dt[, rank := frankv(.SD$value, ties.method = "random"), by = group]
bar_width <- 5
dt[, x1_pos := ((rank - 1) %% bar_width) / (bar_width + 3)]
dt[, y_pos := floor((rank - 1) / bar_width)]
ggplot(dt, aes(x = x0_pos + x1_pos, y = y_pos, alpha = rank)) +
geom_point(color = "red") +
theme_classic()
n_obs <- 10000
dt <- data.table(group = sample(LETTERS[1:20], n_obs, replace = T),
value = runif(n_obs))
dt[, x0_pos := as.numeric(as.factor(group))]
dt[, rank := frankv(.SD$value, ties.method = "random"), by = group]
bar_width <- 5
dt[, x1_pos := ((rank - 1) %% bar_width) / (bar_width + 3)]
dt[, y_pos := floor((rank - 1) / bar_width)]
ggplot(dt, aes(x = x0_pos + x1_pos, y = y_pos, alpha = rank)) +
geom_point(color = "red") +
theme_classic()
n_obs <- 5000
dt <- data.table(group = sample(LETTERS[1:20], n_obs, replace = T),
value = runif(n_obs))
dt[, x0_pos := as.numeric(as.factor(group))]
dt[, rank := frankv(.SD$value, ties.method = "random"), by = group]
bar_width <- 5
dt[, x1_pos := ((rank - 1) %% bar_width) / (bar_width + 3)]
dt[, y_pos := floor((rank - 1) / bar_width)]
ggplot(dt, aes(x = x0_pos + x1_pos, y = y_pos, alpha = rank)) +
geom_point(color = "red") +
theme_classic()
ggplot(dt, aes(x = x0_pos + x1_pos, y = y_pos, alpha = rank)) +
geom_point(color = "red") +
scale_x_discrete() +
scale_y_continuous(expand = c(0, 0)) +
theme_classic()
ggplot(dt, aes(x = x0_pos + x1_pos, y = y_pos, alpha = rank)) +
geom_point(color = "red") +
scale_x_discrete() +
scale_y_continuous(expand = c(0.02, 0.02)) +
theme_classic()
ggplot(dt, aes(x = x0_pos + x1_pos, y = y_pos, alpha = rank)) +
geom_point(color = "red") +
scale_x_discrete(breaks = 1:20) +
scale_y_continuous(expand = c(0.02, 0.02)) +
theme_classic()
ggplot(dt, aes(x = x0_pos + x1_pos, y = y_pos, alpha = rank)) +
geom_point(color = "red") +
scale_x_discrete(breaks = 1:20, labels = function(x) LETTERS[x]) +
scale_y_continuous(expand = c(0.02, 0.02)) +
theme_classic()
ggplot(dt, aes(x = x0_pos + x1_pos, y = y_pos, alpha = rank)) +
geom_point(color = "red") +
scale_x_continuous(breaks = 1:20, labels = function(x) LETTERS[x]) +
scale_y_continuous(expand = c(0.02, 0.02)) +
theme_classic()
n_obs <- 5000
dt <- data.table(group = sample(LETTERS[1:15], n_obs, replace = T),
value = runif(n_obs))
dt[, x0_pos := as.numeric(as.factor(group))]
dt[, rank := frankv(.SD$value, ties.method = "random"), by = group]
bar_width <- 10
dt[, x1_pos := ((rank - 1) %% bar_width) / (bar_width + 3)]
dt[, y_pos := floor((rank - 1) / bar_width)]
ggplot(dt, aes(x = x0_pos + x1_pos, y = y_pos, alpha = rank)) +
geom_point(color = "red") +
scale_x_continuous(breaks = 1:15, labels = function(x) LETTERS[x]) +
scale_y_continuous(expand = c(0.02, 0.02)) +
theme_classic()
dt[, N := .N, by = group]
dt <- data.table(group = sample(LETTERS[1:15], n_obs, replace = T),
value = runif(n_obs))
dt[, x0_pos := as.numeric(as.factor(group))]
dt[, N := .N, by = group]
dt[, rank := frankv(.SD$value, ties.method = "random"), by = group]
bar_width <- 10
dt[, x1_pos := ((rank - 1) %% bar_width) / (bar_width + 3)]
dt[, y_pos := floor((rank - 1) / bar_width)]
ggplot(dt, aes(x = x0_pos + x1_pos, y = y_pos, alpha = N - rank)) +
geom_point(color = "red") +
scale_x_continuous(breaks = 1:15, labels = function(x) LETTERS[x]) +
scale_y_continuous(expand = c(0.02, 0.02)) +
theme_classic()
ggplot(dt, aes(x = x0_pos + x1_pos, y = y_pos, alpha = -(N - rank))) +
geom_point(color = "red") +
scale_x_continuous(breaks = 1:15, labels = function(x) LETTERS[x]) +
scale_y_continuous(expand = c(0.02, 0.02)) +
theme_classic()
ggplot(dt, aes(x = x0_pos + x1_pos, y = y_pos, alpha = rank)) +
geom_point(color = "red") +
scale_x_continuous(breaks = 1:15, labels = function(x) LETTERS[x]) +
scale_y_continuous(expand = c(0.02, 0.02)) +
theme_classic()
?dnorm
list.objects()
?ls
?vector
list(1, 2, list(3, 2))
vector(list(1, 2, list(3, 2)))
unlist(list(1, 2, list(3, 2)))
?index
?rownum
x <- 5:8
names(x) <- letters[5:8]
x
x <- c(2,4,3,5)
x[-1]
x[c(-1, 0, 0, 0)]
x[c(-1, 2, 3, 4)]
?quit
setwd("~/Desktop/Projects/yt-captions/data/")
ls(pattern = ".csv")
?ls
list.files(pattern = ".csv")
files <- lapply(list.files(pattern = ".csv"), read.csv)
lapply(files, names)
lapply(files, names)
rbindlist(lapply(files, function(dt) {
dt %>% select(captionLang, captionType) %>% return()
}))
library(dplyr)
library(data.table)
rbindlist(lapply(files, function(dt) {
dt %>% select(captionLang, captionType) %>% return()
}))
library(tidyr)
library(tidylog)
rbindlist(lapply(files, function(dt) {
dt %>% select(captionLang, captionType) %>% return()
})) %>% distinct()
rbindlist(lapply(files, function(dt) {
dt %>% select(captionLang) %>% return()
})) %>% distinct() %>% View()
lapply(files, names)
rbindlist(lapply(files, function(dt) {
dt %>% select(videoId, captionLang, captionType) %>% return()
})) %>% distinct() %>% View()
rbindlist(lapply(files, function(dt) {
dt %>% select(videoId, captionLang, captionType) %>% return()
})) %>%
distinct() %>%
group_by(captionLang, captionType) %>%
summarise(n = n())
rbindlist(lapply(files, function(dt) {
dt %>% select(videoId, captionLang, captionType) %>% return()
})) %>%
distinct() %>%
group_by(captionLang, captionType) %>%
summarise(n = n()) %>%
View()
rbindlist(lapply(files, function(dt) {
dt %>% select(videoId, captionLang, captionType) %>% return()
})) %>%
distinct() %>%
group_by(videoId) %>%
summarise(n_distinct_capTracks = n(), n_nonasr_capTracks = n_distinct(captionLang[captionType != "asr"]))
rbindlist(lapply(files, function(dt) {
dt %>% select(videoId, captionLang, captionType) %>% return()
})) %>%
distinct() %>%
group_by(videoId) %>%
summarise(n_distinct_capTracks = n(), n_nonasr_capTracks = n_distinct(captionLang[captionType != "asr"])) %>% View()
107 / 304
